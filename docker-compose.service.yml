networks:
  sentiric-net:
    name: ${NETWORK_NAME:-sentiric-net}
    driver: bridge

volumes:
  postgres_data:
  rabbitmq_data:    

services:
  postgres:
    image: postgres:16-alpine
    env_file: 
      - ./.env.docker
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../sentiric-config/postgres-init:/docker-entrypoint-initdb.d
    networks:
      - sentiric-net
    profiles:
      - default
      - data
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5    

  rabbitmq:
    image: rabbitmq:4.1.0-management-alpine
    env_file: 
      - ./.env.docker
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq/
    # ports:
    #   - "${RABBITMQ_PORT}:${RABBITMQ_PORT}"
    #   - "15672:15672"      
    networks:
      - sentiric-net
    profiles:
      - default
      - data
    restart: always
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  media-service:
    build:
      context: ../sentiric-media-service
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: sentiric-media-service
    env_file: 
      - ./.env.docker
    volumes:
      - ../sentiric-config/tls/certs:/etc/sentiric/tls:ro
    ports:
      - "${RTP_SERVICE_PORT_MIN:-10000}-${RTP_SERVICE_PORT_MAX:-10100}:${RTP_SERVICE_PORT_MIN:-10000}-${RTP_SERVICE_PORT_MAX:-10100}/udp"
      # - "${MEDIA_SERVICE_GRPC_PORT}:${MEDIA_SERVICE_GRPC_PORT}"
    networks:
      - sentiric-net
    profiles:
      - default
      - telekom
    restart: always

  user-service:
    build:
      context: ../sentiric-user-service
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: sentiric-user-service
    env_file: 
      - ./.env.docker
    volumes:
      - ../sentiric-config/tls/certs:/etc/sentiric/tls:ro
    # ports:
    #   - "${USER_SERVICE_GRPC_PORT}:${USER_SERVICE_GRPC_PORT}"
    networks:
      - sentiric-net
    profiles:
      - default
      - app
    restart: always

    depends_on:
      postgres:
        condition: service_healthy     

  agent-service: 
    build:

      context: .
      dockerfile: Dockerfile         
      args:
        SERVICE_NAME: sentiric-agent-service

    env_file: 
      - ./.env.docker

    volumes:
      - ../sentiric-config/tls/certs:/etc/sentiric/tls:ro

    ports:
      # - "${AGENT_SERVICE_GRPC_PORT}:${AGENT_SERVICE_GRPC_PORT}"
      # Metriklerin Prometheus tarafından scrape edilebilmesi için portu aç
      - "${METRICS_PORT:-9091}:${METRICS_PORT:-9091}"

    networks:
      - sentiric-net
    
    profiles:
      - default
      - app

    restart: always

    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy    

  builder:
    image: golang:1.24.5-alpine
    working_dir: /app
    env_file: 
      - ./.env.docker 
    volumes:
      - ../sentiric-agent-service:/app
      - ../sentiric-config/tls/certs:/etc/sentiric/tls:ro      
    command: sh -c "while true; do sleep 1000; done"
    profiles:
      - dev
    networks:
      - sentiric-net

  # AI SERVİSLERİ
  llm-service:
    build:
      context: ../sentiric-llm-service
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: sentiric-llm-service
    env_file: 
      - ./.env.docker
    # volumes:
    #   - ../sentiric-config/tls/certs:/etc/sentiric/tls:ro
    # ports:
    #   - "${LLM_SERVICE_PORT}:${LLM_SERVICE_PORT}"
    networks:
      - sentiric-net
    profiles:
      - default
      - ai
    restart: always
    # YENİ EKLENEN KISIM (LLM'in bir bağımlılığı yok, ama en son başlaması mantıklı)
    depends_on:
      agent-service:
        condition: service_started      

  tts-service: # <-- YENİ EKLENEN SERVİS
    build:
      context: ../sentiric-tts-service
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: sentiric-tts-service
    env_file: 
      - ./.env.docker
    # volumes:
    #   - ../sentiric-config/tls/certs:/etc/sentiric/tls:ro
    # ports:
    #   - "${TTS_SERVICE_PORT}:${TTS_SERVICE_PORT}"
    networks:
      - sentiric-net
    profiles:
      - default
      - ai
    restart: always
    depends_on:
      agent-service: # agent-service TTS'i kullandığı için onun başlamasını bekleyelim
        condition: service_started   