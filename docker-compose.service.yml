networks:
  sentiric-net:
    name: ${NETWORK_NAME:-sentiric-net}
    driver: bridge

volumes:
  postgres_data:
  rabbitmq_data:
  redis_data:

services:
  postgres:
    image: postgres:16-alpine
    env_file:
      - ./.env.docker
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../sentiric-config/postgres-init:/docker-entrypoint-initdb.d
    networks:
      - sentiric-net
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:4.1.0-management-alpine
    env_file:
      - ./.env.docker
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq/
    networks:
      - sentiric-net
    restart: always
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
  
  # YENİ SERVİS: Redis
  redis:
    image: redis:7-alpine
    container_name: sentiric-redis-for-agent
    networks: [sentiric-net]
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  agent-service:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: sentiric-agent-service
    env_file:
      - ./.env.docker
    volumes:
      - ../sentiric-config/tls/certs:/etc/sentiric/tls:ro
    ports:
      - "${METRICS_PORT_AGENT:-9091}:${METRICS_PORT_AGENT:-9091}" # METRICS_PORT_AGENT olarak düzeltildi
    networks:
      - sentiric-net
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      # YENİ BAĞIMLILIKLAR:
      redis:
        condition: service_healthy
      tts-gateway:
        condition: service_healthy
      # stt-service ve llm-service'in healthcheck'i var, healthy beklenmeli.
      stt-service:
        condition: service_healthy
      llm-service:
        condition: service_healthy

  # --- DİĞER BAĞIMLI SERVİSLER ---
  tts-gateway:
    build: 
      context: ../sentiric-tts-gateway-service
      args: 
        SERVICE_NAME: sentiric-tts-gateway-service
    container_name: sentiric-tts-gateway-1 # Tutarlılık için isimlendirme
    env_file: [".env.docker"]
    networks: [sentiric-net]
    restart: always
    depends_on:
      # Gateway'in çalışması için uzman motorların sağlıklı olması gerekir.
      tts-coqui-service:
        condition: service_healthy
      tts-edge-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "50051"]
      interval: 10s
      timeout: 5s
      retries: 5

  tts-coqui-service:
    build: { context: ../sentiric-tts-coqui-service }
    container_name: sentiric-coqui-tts-1
    env_file: [".env.docker"]
    networks: [sentiric-net]
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5002/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 5m

  tts-edge-service:
    build: { context: ../sentiric-tts-edge-service }
    container_name: sentiric-edge-tts-1
    env_file: [".env.docker"]
    networks: [sentiric-net]
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5006/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # YENİ SERVİSLER (AGENT'IN BAĞIMLI OLDUĞU)
  stt-service:
    build: { context: ../sentiric-stt-service }
    container_name: sentiric-stt-1
    env_file: [".env.docker"]
    networks: [sentiric-net]
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 2m

  llm-service:
    build: { context: ../sentiric-llm-service }
    container_name: sentiric-llm-1
    env_file: [".env.docker"]
    networks: [sentiric-net]
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7860/health"]
      interval: 30s # Modelin yüklenmesi uzun sürebilir
      timeout: 10s
      retries: 5
      start_period: 2m # Başlaması için zaman tanı