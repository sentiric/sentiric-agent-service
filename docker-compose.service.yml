# docker-compose.service.yml

networks:
  sentiric-net: { name: "${NETWORK_NAME:-sentiric-net}", driver: bridge }
  
volumes:
  postgres_data:
  rabbitmq_data:
  redis_data:
  qdrant_data:
  stt-model-cache:

services:
  postgres:
    build: { context: ../sentiric-postgres }
    env_file: ["${ENV_FILE_PATH}"]
    ports: ["5432:5432"]
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ${CONFIG_REPO_PATH}/postgres-init:/docker-entrypoint-initdb.d
    networks: [sentiric-net]
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    build: { context: ../sentiric-pgadmin }
    env_file: ["${ENV_FILE_PATH}"]
    ports: ["8081:80"]
    networks: [sentiric-net]
    depends_on: { postgres: { condition: service_healthy } }
    restart: always  

  qdrant:
    build: { context: ../sentiric-qdrant }
    env_file: ["${ENV_FILE_PATH}"]
    ports: ["${VECTOR_DB_PORT:-6333}:6333"]
    volumes: [qdrant_data:/qdrant/storage]
    networks: [sentiric-net]
    restart: always    

  rabbitmq:
    build: { context: ../sentiric-rabbitmq }
    env_file: ["${ENV_FILE_PATH}"]
    ports: ["15672:15672", "5672:5672"]
    volumes: [rabbitmq_data:/var/lib/rabbitmq/]
    networks: [sentiric-net]
    restart: always
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
  
  redis:
    build: { context: ../sentiric-redis }
    env_file: ["${ENV_FILE_PATH}"]  
    ports: ["6379:6379"]
    volumes: [redis_data:/data]
    networks: [sentiric-net]
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # --- UYGULAMA SERVİSLERİ ---
  user-service:
    build: { context: ../sentiric-user-service }
    env_file: ["${ENV_FILE_PATH}"]
    volumes: ["${CONFIG_REPO_PATH}/tls/certs:/etc/sentiric/tls:ro"]
    networks: [sentiric-net]
    restart: always
    depends_on: { postgres: { condition: service_healthy } }
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "50053"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s    

  # --- TELEKOM & MEDYA KATMANI ---
  media-service:
    build: { context: ../sentiric-media-service }
    env_file: ["${ENV_FILE_PATH}"]
    volumes: ["${CONFIG_REPO_PATH}/tls/certs:/etc/sentiric/tls:ro"]
    ports: ["${RTP_SERVICE_PORT_MIN}-${RTP_SERVICE_PORT_MAX}:${RTP_SERVICE_PORT_MIN}-${RTP_SERVICE_PORT_MAX}/udp"]
    networks: [sentiric-net]
    restart: always
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "50052"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s    

  # --- SES ORKESTRASYON KATMANI ---
  tts-edge-service:
    build: { context: ../sentiric-tts-edge-service }
    env_file: ["${ENV_FILE_PATH}"]
    ports: ["${TTS_EDGE_SERVICE_PORT:-5006}:5006"]
    networks: [sentiric-net]
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5006/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s    

  tts-gateway:
    build: { context: ../sentiric-tts-gateway-service }
    env_file: ["${ENV_FILE_PATH}"]
    volumes: ["${CONFIG_REPO_PATH}/tls/certs:/etc/sentiric/tls:ro"]
    ports: ["${TTS_GATEWAY_PORT:-50051}:50051"]
    networks: [sentiric-net]
    restart: always
    depends_on: { tts-edge-service: { condition: service_healthy } }
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "50051"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s    

  stt-service:
    build: { context: ../sentiric-stt-service }
    env_file: ["${ENV_FILE_PATH}"]
    volumes: [stt-model-cache:/root/.cache]
    ports: ["${STT_SERVICE_PORT:-5001}:5001"]
    networks: [sentiric-net]
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 3m        

  # --- AI SERVİSLERİ ---
  llm-service:
    build: { context: ../sentiric-llm-service }
    env_file: ["${ENV_FILE_PATH}"]
    ports: ["${LLM_SERVICE_PORT:-7860}:7860"]
    networks: [sentiric-net]
    restart: always
    healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:7860/health"]
        interval: 30s
        timeout: 10s
        retries: 5
        start_period: 3m            

  # --- PLATFORMUN BEYNİ: AGENT SERVICE ---
  agent-service:
    build: { context: ../sentiric-agent-service }
    env_file: ["${ENV_FILE_PATH}"]
    volumes: ["${CONFIG_REPO_PATH}/tls/certs:/etc/sentiric/tls:ro"]
    ports: ["${METRICS_PORT_AGENT:-9091}:${METRICS_PORT_AGENT:-9091}"]
    networks: [sentiric-net]
    restart: always
    depends_on:
      postgres: { condition: service_healthy }
      rabbitmq: { condition: service_healthy }
      redis: { condition: service_healthy }
      media-service: { condition: service_healthy }
      user-service: { condition: service_healthy }
      tts-gateway: { condition: service_healthy }
      stt-service: { condition: service_healthy }
      llm-service: { condition: service_healthy }


  # --- ARKA PLAN VE VERİ İŞLEME SERVİSLERİ ---
  knowledge-service:
    build: { context: ../sentiric-knowledge-service }
    env_file: ["${ENV_FILE_PATH}"]
    ports: 
      - "${KNOWLEDGE_SERVICE_PORT:-5055}:5055"
      - "${KNOWLEDGE_SERVICE_GRPC_PORT:-50055}:50055"
    volumes: ["./data:/app/data", "stt-model-cache:/root/.cache/torch"]
    networks: [sentiric-net]
    restart: always
    depends_on: { 
      postgres: { condition: service_healthy }, 
      qdrant: { condition: service_started }
    }
